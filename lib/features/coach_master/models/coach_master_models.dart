class EmuCoachMaster {
  final int coachId;
  final String coachNo;
  final String? owningRly;
  final String? coachType;
  final String? coachKind;
  final String? coachCategory;
  final String? powerGenerationType;

 // final String? unitNo;
  final String? localCoachNo;
  final String? manufacturer;
  final String? maintType;
 // final String? owningShed;
  final String? maintShed;
  final DateTime? condemnationDate;
  final String? isBiotoiletAvailable;
 // final String? isBiotoiletFitted;
  final String? acFlag;
  final String? cctvAvailable;
  final double? tareWeight;
  final double? maxSpeed;
  final int? codalLife;
  final double? kmEarnedBuilt;
  final double? kmEarnedLastPoh;
  final String? status;
  final String? createdBy;
  final DateTime? createdOn;
  final String? updatedBy;
  final DateTime? updatedOn;
  final String? nominatedWorkshop;
  final String? prsClass;
  final String? gauge;
  final String? fitnessType;
  final String? couplingType;
  final String? brakeType;
  final String? wspSystem;
  final String? mlrWorkshop;
  final DateTime? mlrDate;
  final String? refurbishmentWorkshop;
  final DateTime? refurbishmentDate;
  final int? icmsCoachId;
  final String? failureClass;
  final DateTime? builtDate;
  final DateTime? coachCommissionDate;
  final DateTime? coachReceivedDate;
  final String? shellNo;
  final String? underframeNo;
  final String? coachAutoGenerated;
  final DateTime? coachGeneratedDate;
  final int? orderId;
  final int? coachTypCntId;
  final int? workId;
  final String? gatePassNo;
  final String? coachOwningDiv;
  final DateTime? addedInMasterTime;
  final DateTime? factoryTurnoutDate;
  final DateTime? recmdCndmDate;
  final String? rfidStatus;
  final String? baseDepot;
  final String? propulsionType;
  final String? propulsionMake;
  final String? deleteFlag;
  final String? utilityType;
  final String? coachNoWithOwningRlyImage;
  final String? coachTypeImage;
  final String? coachProImage;
  final String? otherBuiltPageImage;
  final String? fileDataBase64ForEmuFrontImage;
  final String? fileDataBase64ForEmuBackImage;
  final String? fileDataBase64ForEmuEndPannelImage;
  final String? fileDataBase64ForEmuBuiltPlateImage;

  EmuCoachMaster({
    required this.coachId,
    required this.coachNo,
    this.owningRly,
    this.coachType,
    this.coachKind,
    this.coachCategory,
    this.powerGenerationType,

  //  this.unitNo,
    this.localCoachNo,
    this.manufacturer,
    this.maintType,
  //  this.owningShed,
    this.maintShed,
    this.condemnationDate,
    this.isBiotoiletAvailable,
   // this.isBiotoiletFitted,
    this.acFlag,
    this.cctvAvailable,
    this.tareWeight,
    this.maxSpeed,
    this.codalLife,
    this.kmEarnedBuilt,
    this.kmEarnedLastPoh,
    this.status,
    this.createdBy,
    this.createdOn,
    this.updatedBy,
    this.updatedOn,
    this.nominatedWorkshop,
    this.prsClass,
    this.gauge,
    this.fitnessType,
    this.couplingType,
    this.brakeType,
    this.wspSystem,
    this.mlrWorkshop,
    this.mlrDate,
    this.refurbishmentWorkshop,
    this.refurbishmentDate,
    this.icmsCoachId,
    this.failureClass,
    this.builtDate,
    this.coachCommissionDate,
    this.coachReceivedDate,
    this.shellNo,
    this.underframeNo,
    this.coachAutoGenerated,
    this.coachGeneratedDate,
    this.orderId,
    this.coachTypCntId,
    this.workId,
    this.gatePassNo,
    this.coachOwningDiv,
    this.addedInMasterTime,
    this.factoryTurnoutDate,
    this.recmdCndmDate,
    this.rfidStatus,
    this.baseDepot,
    this.propulsionType,
    this.propulsionMake,
    this.deleteFlag,
    this.utilityType,
    this.coachNoWithOwningRlyImage,
    this.coachTypeImage,
    this.coachProImage,
    this.otherBuiltPageImage,
    this.fileDataBase64ForEmuFrontImage,
    this.fileDataBase64ForEmuBackImage,
    this.fileDataBase64ForEmuEndPannelImage,
    this.fileDataBase64ForEmuBuiltPlateImage,
  });

  factory EmuCoachMaster.fromJson(Map<String, dynamic> json) {
    DateTime? parseDate(dynamic val) =>
        val == null ? null : DateTime.tryParse(val.toString());

    return EmuCoachMaster(
      coachId: json['coachId'],
      coachNo: json['coachNo'],
      owningRly: json['owningRly'],
      coachType: json['coachType'],
      coachKind: json['coachKind'],
      coachCategory: json['coachCategory'],
      powerGenerationType: json['powerGenerationType'],

    //  unitNo: json['unitNo'],
      localCoachNo: json['localCoachNo'],
      manufacturer: json['manufacturer'],
      maintType: json['maintType'],
      //owningShed: json['owningShed'],
      maintShed: json['maintShed'],
      condemnationDate: parseDate(json['condemnationDate']),
      isBiotoiletAvailable: json['isBiotoiletAvailable'],
      //isBiotoiletFitted: json['isBiotoiletFitted'],
      acFlag: json['acFlag'] == 'Y' ? 'AC' : 'NON-AC',
      cctvAvailable: json['cctvAvailable'],
      tareWeight: (json['tareWeight'] as num?)?.toDouble(),
      maxSpeed: (json['maxSpeed'] as num?)?.toDouble(),
      codalLife: json['codalLife'],
      kmEarnedBuilt: (json['kmEarnedBuilt'] as num?)?.toDouble(),
      kmEarnedLastPoh: (json['kmEarnedLastPoh'] as num?)?.toDouble(),
      status: json['status'],
      createdBy: json['createdBy'],
      createdOn: parseDate(json['createdOn']),
      updatedBy: json['updatedBy'],
      updatedOn: parseDate(json['updatedOn']),
      nominatedWorkshop: json['nominatedWorkshop'],
      prsClass: json['prsClass'],
      gauge: json['gauge'],
      fitnessType: json['fitnessType'],
      couplingType: json['couplingType'],
      brakeType: json['brakeType'],
      wspSystem: json['wspSystem'],
      mlrWorkshop: json['mlrWorkshop'],
      mlrDate: parseDate(json['mlrDate']),
      refurbishmentWorkshop: json['refurbishmentWorkshop'],
      refurbishmentDate: parseDate(json['refurbishmentDate']),
      icmsCoachId: json['icmsCoachId'],
      failureClass: json['failureClass'],
      builtDate: parseDate(json['builtDate']),
      coachCommissionDate: parseDate(json['coachCommissionDate']),
      coachReceivedDate: parseDate(json['coachReceivedDate']),
      shellNo: json['shellNo'],
      underframeNo: json['underframeNo'],
      coachAutoGenerated: json['coachAutoGenerated'],
      coachGeneratedDate: parseDate(json['coachGeneratedDate']),
      orderId: json['orderId'],
      coachTypCntId: json['coachTypCntId'],
      workId: json['workId'],
      gatePassNo: json['gatePassNo'],
      coachOwningDiv: json['coachOwningDiv'],
      addedInMasterTime: parseDate(json['addedInMasterTime']),
      factoryTurnoutDate: parseDate(json['factoryTurnoutDate']),
      recmdCndmDate: parseDate(json['recmdCndmDate']),
      rfidStatus: json['rfidStatus'],
      baseDepot: json['baseDepot'],
      propulsionType: json['propulsionType'],
      propulsionMake: json['propulsionMake'],
      deleteFlag: json['deleteFlag'],
      utilityType: json['utilityType'],
      coachNoWithOwningRlyImage: json['coachNoWithOwningRlyImage'],
      coachTypeImage: json['coachTypeImage'],
      coachProImage: json['coachProImage'],
      otherBuiltPageImage: json['otherBuiltPageImage'],
      fileDataBase64ForEmuFrontImage: json['fileDataBase64ForEmuFrontImage'],
      fileDataBase64ForEmuBackImage: json['fileDataBase64ForEmuBackImage'],
      fileDataBase64ForEmuEndPannelImage:
          json['fileDataBase64ForEmuEndPannelImage'],
      fileDataBase64ForEmuBuiltPlateImage:
          json['fileDataBase64ForEmuBuiltPlateImage'],
    );
  }

  Map<String, dynamic> toJson() {
    // Helper to convert DateTime to yyyy-MM-dd string
    String? formatDateOnly(DateTime? dt) =>
        dt != null ? dt.toIso8601String().split('T').first : null;

    return {
      'coachId': coachId,
      'coachNo': coachNo,
      'owningRly': owningRly,
      'coachType': coachType,
      'coachKind': coachKind,
      'coachCategory': coachCategory,
      'powerGenerationType': powerGenerationType,

    //  'unitNo': unitNo,
      'localCoachNo': localCoachNo,
      'manufacturer': manufacturer,
      'maintType': maintType,
   //   'owningShed': owningShed,
      'maintShed': maintShed,
      'condemnationDate': formatDateOnly(condemnationDate),
      'isBiotoiletAvailable': isBiotoiletAvailable,
     // 'isBiotoiletFitted': isBiotoiletFitted,
      'acFlag': acFlag,
      'cctvAvailable': cctvAvailable,
      'tareWeight': tareWeight,
      'maxSpeed': maxSpeed,
      'codalLife': codalLife,
      'kmEarnedBuilt': kmEarnedBuilt,
      'kmEarnedLastPoh': kmEarnedLastPoh,
      'status': status,
      'createdBy': createdBy,
      'createdOn': formatDateOnly(createdOn),
      'updatedBy': updatedBy,
      'updatedOn': formatDateOnly(updatedOn),
      'nominatedWorkshop': nominatedWorkshop,
      'prsClass': prsClass,
      'gauge': gauge,
      'fitnessType': fitnessType,
      'couplingType': couplingType,
      'brakeType': brakeType,
      'wspSystem': wspSystem,
      'mlrWorkshop': mlrWorkshop,
      'mlrDate': formatDateOnly(mlrDate),
      'refurbishmentWorkshop': refurbishmentWorkshop,
      'refurbishmentDate': formatDateOnly(refurbishmentDate),
      'icmsCoachId': icmsCoachId,
      'failureClass': failureClass,
      'builtDate': formatDateOnly(builtDate),
      'coachCommissionDate': formatDateOnly(coachCommissionDate),
      'coachReceivedDate': formatDateOnly(coachReceivedDate),
      'shellNo': shellNo,
      'underframeNo': underframeNo,
      'coachAutoGenerated': coachAutoGenerated,
      'coachGeneratedDate': formatDateOnly(coachGeneratedDate),
      'orderId': orderId,
      'coachTypCntId': coachTypCntId,
      'workId': workId,
      'gatePassNo': gatePassNo,
      'coachOwningDiv': coachOwningDiv,
      'addedInMasterTime': formatDateOnly(addedInMasterTime),
      'factoryTurnoutDate': formatDateOnly(factoryTurnoutDate),
      'recmdCndmDate': formatDateOnly(recmdCndmDate),
      'rfidStatus': rfidStatus,
      'baseDepot': baseDepot,
      'propulsionType': propulsionType,
      'propulsionMake': propulsionMake,
      'deleteFlag': deleteFlag,
      'utilityType': utilityType,
      'coachNoWithOwningRlyImage': coachNoWithOwningRlyImage,
      'coachTypeImage': coachTypeImage,
      'coachProImage': coachProImage,
      'otherBuiltPageImage': otherBuiltPageImage,
      'fileDataBase64ForEmuFrontImage': fileDataBase64ForEmuFrontImage,
      'fileDataBase64ForEmuBackImage': fileDataBase64ForEmuBackImage,
      'fileDataBase64ForEmuEndPannelImage': fileDataBase64ForEmuEndPannelImage,
      'fileDataBase64ForEmuBuiltPlateImage':
          fileDataBase64ForEmuBuiltPlateImage,
    };
  }
}
